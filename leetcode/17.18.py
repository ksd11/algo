""" class Solution:
#     # 超时
#     def shortestSeq(self, big: list[int], small: list[int]) -> list[int]:
#         min_pos = None
#         max_pos = None
#         pos_arr = {i: None for i in small}
#         res = 10**9 # 最小长度
#         pos1 = -1 # 起始
#         pos2 = -1 # 结束
#         success = False # 至少找到

#         for idx,num in enumerate(big):
#             if num in pos_arr:
#                 pos_arr[num] = idx

#                 if not success and sum(1 for v in pos_arr.values() if v!=None) == len(small):
#                     success = True

#                 if success:
#                     min_pos = min(pos_arr.values())
#                     max_pos = max(pos_arr.values())
#                     if max_pos - min_pos < res:
#                         res = max_pos - min_pos
#                         pos1 = min_pos
#                         pos2 = max_pos
        
#         if success:
#             return [pos1, pos2]
#         else:
#             return []

    def shortestSeq(self, big: list[int], small: list[int]) -> list[int]:
        min_pos = None
        max_pos = None
        pos_arr = {i: None for i in small}
        res = 10**9 # 最小长度
        pos1 = -1 # 起始
        pos2 = -1 # 结束
        success = False # 至少找到
        cnt = 0 # 成功找到几个
        value_set = []

        for idx,num in enumerate(big):
            if num in pos_arr:
                if pos_arr[num] == None:
                    cnt += 1
                    if cnt == len(small):
                        success = True

                # 维护min_pos
                if pos_arr[num] != None and pos_arr[num] == min_pos:
                    value_set = value_set[1:]
                    p = value_set[0][0]
                    v = value_set[0][1]
                    while  p != pos_arr[v]:
                        value_set = value_set[1:]
                        p = value_set[0][0]
                        v = value_set[0][1]
                    print(f"min_pos to {value_set[0]}")
                
                pos_arr[num] = idx
                value_set.append((idx , num))

                if len(pos_arr) != 0:
                    min_pos = value_set[0][0]

                if success:
                    max_pos = idx

                    if max_pos - min_pos < res:
                        res = max_pos - min_pos
                        pos1 = min_pos
                        pos2 = max_pos
        
        if success:
            return [pos1, pos2]
        else:
            return [] """


class Solution:

    def update(self, min_pos, max_pos, res, pos1, pos2):
        if max_pos - min_pos < res:
            res = max_pos - min_pos
            pos1 = min_pos
            pos2 = max_pos
        return res, pos1, pos2

    def shortestSeq(self, big: list[int], small: list[int]) -> list[int]:
        min_pos = None
        pos_arr = {i: None for i in small}
        res = 10**9 # 最小长度
        pos1 = -1 # 起始
        pos2 = -1 # 结束
        success = False # 至少找到
        cnt = 0 # 成功找到几个
        value_set = []

        for idx,num in enumerate(big):
            if num in pos_arr:
                # 在small数组中是否还存在未找到的
                if pos_arr[num] == None:
                    cnt += 1
                    if cnt == len(small):
                        success = True

                # 维护min_pos
                if pos_arr[num] != None and pos_arr[num] == min_pos:
                    value_set = value_set[1:]
                    p, v = value_set[0]
                    while  p != pos_arr[v]:
                        value_set = value_set[1:]
                        p, v  = value_set[0]
                
                pos_arr[num] = idx
                value_set.append((idx , num))

                if len(pos_arr) != 0:
                    min_pos = value_set[0][0]

                if success:
                    res, pos1, pos2 = self.update(min_pos, idx, res, pos1, pos2) # 更新
        
        if success:
            return [pos1, pos2]
        else:
            return []






if __name__ == '__main__':
    solution = Solution()
    # big = [7,5,9,0,2,1,3,5,7,9,1,1,5,8,8,9,7]
    # small = [1,5,9]
    # big = [1,2,1,2,1,2]
    # small = [1,2]
    big = [668, 958, 134, 402, 139, 890, 272, 706, 41, 998, 359, 361, 679, 704, 29, 222, 118, 92, 447, 479, 802, 913, 410, 755, 285, 143, 780, 809, 241, 591, 819, 122, 380, 599, 366, 998, 272, 536, 910, 991, 434, 867, 308, 279, 859, 34, 799, 297, 143, 569, 99, 722, 350, 692, 688, 633, 924, 554, 855, 162, 362, 565, 94, 552, 696, 95, 267, 954, 826, 287, 12, 194, 331, 90, 246, 835, 73, 449, 844, 681, 379, 611, 722, 819, 844, 428, 121, 934, 527, 875, 282, 684, 603, 72, 187, 275, 565, 680, 126, 711, 38, 60, 261, 666, 392, 586, 748, 50, 634, 753, 825, 730, 454, 620, 61, 365, 824, 411, 384, 941, 51, 216, 545, 990, 213, 169, 681, 107, 398, 651, 132, 622, 383, 172, 425, 513, 903, 262, 938, 562, 91, 859, 580, 9, 160, 641, 643, 353, 302, 30, 963, 626, 350, 557, 92, 90, 922, 574, 974, 376, 508, 874, 331, 527, 22, 315, 554, 384, 237, 210, 70, 84, 638, 533, 453, 454, 854, 671, 417, 229, 209, 281, 659, 11, 816, 833, 132, 115, 165, 487, 76, 617, 522, 827, 862, 391, 730, 75, 206, 29, 711, 600, 976, 290, 832, 433, 245, 602, 940, 76, 481, 693, 444, 501, 511, 363, 209, 665, 924, 123, 281, 735, 786, 720, 933, 758, 350, 231, 634, 690, 723, 652, 358, 470, 365, 549, 580, 234, 897, 433, 275, 616, 417, 520, 361, 669, 344, 121, 863, 532, 913, 644, 774, 187, 872, 995, 760, 166, 824, 37, 351, 713, 963, 559, 144, 146, 750, 728, 333, 425, 273, 20, 378, 222, 146, 952, 851, 168, 457, 223, 269, 206, 385, 848, 844, 675, 253, 549, 369, 264, 618, 840, 257, 607, 191, 790, 368, 733, 931, 580, 609, 414, 305, 180, 839, 673, 504, 369, 746, 466, 771, 125, 23, 254, 800, 452, 70, 869, 374, 12, 717, 394, 752, 343, 305, 517, 898, 86, 357, 19, 449, 609, 40, 816, 837, 106, 228, 336, 317, 836, 528, 303, 190, 206, 12, 402, 119, 897, 672, 574, 735, 631, 975, 981, 676, 240, 928, 206, 230, 197, 149, 667, 923, 803, 409, 950, 982, 278, 912, 921, 949, 985, 702, 138, 660, 514, 241, 238, 51, 511, 531, 733, 139, 496, 705, 864, 151, 672, 141, 144, 76, 791, 481, 67, 981, 438, 744, 495, 969, 759, 12, 105, 102, 691, 146, 733, 976, 62, 417, 397, 611, 757, 129, 259, 961, 42, 356, 879, 586, 478, 162, 746, 382, 795, 312, 969, 706, 792, 922, 329, 796, 644, 591, 694, 168, 810, 534, 730, 102, 823, 582, 936, 395, 695, 267, 445, 562, 425, 36, 194, 198, 126, 996, 787, 764, 892, 395, 143, 435, 349, 34, 76, 78, 648, 396, 90, 520, 2, 329, 537, 788, 209, 217, 666, 430, 769, 647, 286, 637, 399, 185, 600, 17, 656, 438, 23, 332, 904, 372, 697, 872, 89, 764, 724, 359, 641, 796, 575, 376, 675, 295, 182, 927, 852, 933, 108, 201, 179, 60, 691, 591, 417, 555, 455, 528, 695, 97, 645, 369, 983, 345, 330, 15, 421, 661, 647, 873, 310, 99, 472, 812, 435, 780, 504, 787, 935, 416, 991, 434, 492, 859, 380, 89, 886, 867, 914, 750, 389, 350, 327, 326, 378, 241, 618, 435, 768, 538, 498, 711, 394, 775, 463, 601, 412, 778, 47, 588, 676, 90, 209, 849, 316, 58, 39, 866, 140, 776, 587, 441, 994, 80, 595, 873, 723, 370, 812, 378, 782, 915, 312, 766, 758, 806, 228, 632, 132, 893, 568, 978, 17, 506, 653, 5, 356, 487, 486, 561, 452, 114, 738, 451, 480, 225, 782, 599, 164, 799, 914, 683, 907, 463, 156, 486, 968, 213, 795, 976, 200, 647, 815, 655, 437, 734, 209, 799, 638, 953, 371, 901, 97, 453, 432, 34, 387, 585, 750, 901, 990, 325, 80, 314, 202, 893, 658, 390, 685, 972, 96, 968, 447, 391, 323, 334, 465, 710, 652, 746, 611, 713, 24, 971, 973, 680, 510, 145, 896, 326, 800, 644, 951, 283, 676, 194, 593, 993, 690, 916, 759, 898, 267, 815, 653, 475, 595, 381, 115, 572, 397, 331, 984, 124, 573, 216, 224, 608, 945, 5, 737, 865, 41, 43, 725, 211, 503, 426, 192, 158, 110, 471, 47, 335, 288, 569, 255, 933, 181, 415, 615, 153, 293, 462, 96, 72, 612, 464, 747, 739, 677, 772, 507, 270, 664, 603, 930, 665, 997, 356, 648, 999, 246, 759, 659, 787, 748, 895, 165, 954, 382, 743, 55, 54, 692, 111, 368, 1, 854, 298, 891, 861, 754, 150, 351, 956, 722, 246, 803, 265, 96, 815, 148, 421, 523, 991, 614, 961, 344, 471, 620, 263, 916, 45, 196, 187, 878, 427, 13, 993, 122, 692, 137, 211, 937, 411, 654, 868, 165, 229, 591, 408, 858, 25, 569, 76, 520, 572, 582, 404, 167, 385, 590, 735, 297, 350, 901, 43, 395, 879, 715, 656, 327, 414, 271, 779, 278, 345, 83, 419, 177, 317, 70, 968, 214, 47, 841, 714, 91, 32, 921, 545, 232, 931, 780, 130, 319, 253, 270, 323, 488, 240, 577, 932, 918, 993, 280, 854, 41, 605, 934, 278, 616, 147, 645, 645, 106, 928, 375, 332, 628, 449, 654, 120, 151, 531, 399, 860, 426, 404, 639, 817, 131, 433, 808, 67, 295, 11, 212, 227, 92, 957, 606, 360, 181, 611, 534, 900, 752, 152, 659, 441, 759, 518, 826, 4, 593, 320, 490, 101, 597, 472, 256, 557, 273, 378, 927, 335, 403, 418, 639, 867, 838, 504, 64, 324, 369, 847, 756, 509, 371, 523, 245, 611, 687, 667, 457, 830, 929, 958, 259, 433, 548, 63, 690, 860, 270, 954, 152, 481, 84, 324, 276, 302, 376, 42, 498, 202, 370, 743, 830, 151, 730, 777, 716, 246, 976, 802, 638, 688, 212, 955, 610, 59, 406, 375, 357, 571, 220, 163, 668, 962, 617, 108, 109, 938, 31, 192, 782, 572, 275, 907, 278]
    small = [910, 832, 953, 172, 253, 454, 759, 641, 921, 993, 415, 305, 403, 481, 312, 267, 162, 815, 24, 968, 930, 80, 273, 96, 326, 802, 600, 565, 569, 130, 557, 847, 447, 425, 655, 196, 800, 643, 410, 278, 771, 610, 687, 20, 76, 395, 711, 478, 714, 329, 213, 58, 574, 472, 12, 264, 63, 504, 799, 523, 520, 572, 758, 140, 90, 280, 153, 50, 611, 324, 659, 369, 270, 11, 691, 380, 449, 230, 532, 83, 683, 259, 825, 332, 131, 652, 585, 702, 287, 475, 713, 245, 378, 614, 961, 836, 115, 168, 114, 132, 938, 38, 796, 533, 302, 34, 92, 840, 15, 433, 73, 286, 421, 774, 89, 912, 319, 587, 22, 634, 787, 333, 486, 849, 901, 680, 620, 385, 782, 67, 212, 353, 823, 586, 554, 146, 382, 452, 668, 752, 754, 973, 812, 376, 72, 358, 568, 734, 854, 733, 246, 165, 143, 772, 833, 438, 102, 559, 893, 940, 873, 194, 444, 111, 427, 760]
    question_ouput = solution.shortestSeq(big, small)
    print(question_ouput)